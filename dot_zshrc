LANG=en_US.UTF-8
GITHUB_USER=ibuchanan
EDITOR="code --wait"

# Homebrew
if [[ "$(uname)" = "Darwin" ]]; then
    BREWCMD=/opt/homebrew/bin/brew       
else
    BREWCMD=/home/linuxbrew/.linuxbrew/bin/brew
fi
if [[ -x "$(command -v $BREWCMD)" ]]; then
    eval $($BREWCMD shellenv)
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# Pip --user commands
if [[ -d "$HOME/.local/bin" ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# Personal commands
if [[ -d "$HOME/bin" ]]; then
    export PATH="$HOME/bin:$PATH"
fi

# Lastpass & secrets
# brew install lastpass-cli
if [[ -x "$(command -v lpass)" ]]; then
    LPASS_AGENT_TIMEOUT=$(( 12 * 60 * 60 ))
    ## Atlassian Developer Environment
    export LPASS_ENV="devpartisan"
    export ATLASSIAN_ACCOUNT_EMAIL=$(lpass show ".env\\${LPASS_ENV}/account" --username)
    export ATLASSIAN_ACCOUNT_API_KEY=$(lpass show ".env\\${LPASS_ENV}/account" --password)
    export ATLASSIAN_ACCOUNT_ID=$(lpass show ".env\\${LPASS_ENV}/account" --field="id")
    export ATLASSIAN_APP_3LO_CLIENT_ID=$(lpass show ".env\\${LPASS_ENV}/3lo" --username)
    export ATLASSIAN_APP_3LO_CLIENT_SECRET=$(lpass show ".env\\${LPASS_ENV}/3lo" --password)
    export ATLASSIAN_APP_3LO_REDIRECT_URI=$(lpass show ".env\\${LPASS_ENV}/3lo" --url)
    export ATLASSIAN_APP_2LO_CLIENT_ID=$(lpass show ".env\\${LPASS_ENV}/2lo" --username)
    export ATLASSIAN_APP_2LO_CLIENT_SECRET=$(lpass show ".env\\${LPASS_ENV}/2lo" --password)
    export ATLASSIAN_APP_NAME=$(shuf -n1  /usr/share/dict/words)-$(shuf -n1  /usr/share/dict/words)-$(shuf -n1  /usr/share/dict/words)
    export ATLASSIAN_APP_ID=$(uuidgen)
    export ATLASSIAN_APP_CONNECT_PORT=
    export ATLASSIAN_APP_CONNECT_BASE_URL=https://${ATLASSIAN_APP_NAME}.example.com/
    export ATLASSIAN_ORGANIZATION_ID=$(lpass show ".env\\${LPASS_ENV}/organization" --username)
    export ATLASSIAN_ORGANIZATION_BEARER=$(lpass show ".env\\${LPASS_ENV}/organization" --password)
    export ATLASSIAN_SITE_NAME=$(lpass show ".env\\${LPASS_ENV}/site" --field="name")
    export ATLASSIAN_SITE_BASE_URL=$(lpass show ".env\\${LPASS_ENV}/site" --url)
    export ATLASSIAN_SITE_CLOUD_ID=$(lpass show ".env\\${LPASS_ENV}/site" --field="id")
    export ATLASSIAN_SITE_BASIC_USER=$(lpass show ".env\\${LPASS_ENV}/site" --username)
    export ATLASSIAN_SITE_BASIC_PASS=$(lpass show ".env\\${LPASS_ENV}/site" --password)
fi

# Docker via Podman
# Not compatible with Atlassian toolchain :(
# if [[ -x "$(command -v podman)" ]]; then
#     alias docker=podman
#     export DOCKER_HOST="unix://$HOME/.local/share/containers/podman/machine/qemu/podman.sock"
# fi

# Python
# brew install pyenv zlib sqlite
export WORKON_HOME=$HOME/.virtualenvs
export PYENV_ROOT="$HOME/.pyenv"
if [[ -d "$PYENV_ROOT" ]]; then
    export CFLAGS='-O2'
    # Default to brew installed libraries for building Python
    export LDFLAGS="-L$(brew --prefix)/opt/zlib/lib -L$(brew --prefix)/opt/bzip2/lib -L$(brew --prefix)/opt/sqlite3/lib"
    export CPPFLAGS="-I$(brew --prefix)/opt/zlib/include -I$(brew --prefix)/opt/bzip2/include -I$(brew --prefix)/opt/sqlite3/include"
    PATH="$PYENV_ROOT/bin:$PATH"
    if [[ -x "$(command -v pyenv)" ]]; then
        eval "$(pyenv init -)"
    fi
fi
# Path for brew pip
if [[ -d "$(brew --prefix)/share/python" ]]; then
    export PATH="$PATH:$(brew --prefix)/share/python"
fi

# Java
# brew install jenv
# brew install openjdk
if [[ -x "$(command -v jenv)" ]]; then
    # export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
    # jenv may need to be configured with a global JVM
    # For example:
    # $ brew install openjdk@20
    # $ jenv global 20.0
fi
# Specmatic
export SPECMATIC_HOME="$HOME/bin"
if [[ -f "$SPECMATIC_HOME/specmatic.jar" ]]; then
    alias specmatic="java -jar $SPECMATIC_HOME/specmatic.jar"
fi

# Ruby
export RBENV_HOME="$HOME/.rbenv"
if [[ -d "$RBENV_HOME" ]]; then
	export PATH="$RBENV_HOME/bin:$PATH"
	eval "$(rbenv init -)"
fi

# Rust
if [[ -d ~/.cargo/bin ]]; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# Go
if [[ -d ~/.gvm ]]; then
    source ~/.gvm/scripts/gvm
fi

# Node
# export NODE_ENV=development
# Forge doesn't like this
export NVM_DIR="$HOME/.nvm"
if [[ -d "$NVM_DIR" ]] && [[ -x "$(command -v nvm)" ]]; then
    source $(brew --prefix nvm)/nvm.sh
fi
# brew install fnm
export FNM_DIR="$HOME/.fnm"
if [[ -d "$FNM_DIR" ]] && [[ -x "$(command -v fnm)" ]]; then
    eval "$(fnm env --use-on-cd)"
fi

# Prompt
# brew install starship
export STARSHIP_CONFIG=~/.starship.toml
if [[ -x "$(command -v starship)" ]]; then
    eval "$(starship init zsh)"
fi
# eza replaces built in ls
if [[ -x "$(command -v eza)" ]]; then
    alias ll='eza -al --group-directories-first'
    alias ls='eza -alF --color=always --sort=size | grep -v /'
fi
# display fastfetch on terminal start for context
if [[ -x "$(command -v fastfetch)" ]]; then
    fastfetch
fi


# Zinit
# brew install zinit
if [[ -f "$(brew --prefix)/opt/zinit/zinit.zsh" ]]; then
    source "$(brew --prefix)/opt/zinit/zinit.zsh"
    autoload -Uz compinit && compinit
    autoload -Uz _zinit
    (( ${+_comps} )) && _comps[zinit]=_zinit

    # Load a few important annexes, without Turbo
    # (this is currently required for annexes)
    zinit light-mode for \
        zdharma-continuum/z-a-patch-dl \
        zdharma-continuum/z-a-as-monitor \
        zdharma-continuum/z-a-bin-gem-node

    ### End of Zinit's installer chunk

    # Load plugins
    zinit load zsh-users/zsh-syntax-highlighting
    zinit load zsh-users/zsh-completions
    zinit load zsh-users/zsh-autosuggestions
    zinit snippet OMZ::plugins/command-not-found
fi
